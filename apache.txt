##### Apache #####


### Install httpd manual. Provides quite a bit of apache documentation.
	# yum install httpd-manual
	# elinks <hostname>/manual

### Create new virtual host

	When working with virtual hosts, there are a few things to be aware of:

		- If your Apache server is configured for virtual hosts, all servers it is hosting should be handled by virtual hosts. To create a catch all entry for all HTTP requests that are directed to this host but that do not have a specific virtual host file, you can create a virtual host for _default_:80. 

		- Name-based virtual hosting is the most common solution. In this solution, virtual hosts are using different names but the same IP address.

		- IP-based virtual hosts are less common, but are required if the name of a web server must be resolved to a unique IP address. IP-based virtual hosts do require several IP addresses on the same machine and are common in configuration where the Apache server uses TLS to secure connections.


	- Step by step:

		1. Create local directory structure with default index.html pages
		2. Add selinux fcontext for new directory structure
		3. Set up firewall - # firewall-cmd --permanent --add-service=http; firewall-cmd --reload
		4. Edit /etc/hosts file
		5. Add <Directory <path>> to /etc/httpd/conf/httpd.conf Note: Copy default /var/www/html one

			<Directory "/var/www">
			    AllowOverride None
			    Require all granted
			</Directory>

		6. Create and edit virtual hosts file in /etc/conf.d/<filename>.conf

			<VirtualHost *:80>
		        ServerAdmin root@nixation.com
		        Servername www.nixation.com
		        ServerAlias nixation.com
		        DocumentRoot /web/main
		        CustomLog logs/nixation_access_log common
		        ErrorLog logs/nixation_error_log
			</VirtualHost>

			<VirtualHost *:80>
		        ServerName app1.nixation.com
		        DocumentRoot /web/app1
		        CustomLog logs/app1_nixation_access_log common
		        ErrorLog logs/app1_nixation_error_log
			</VirtualHost>


### Restrict user access via .htaccess basic auth


### Deploy cgi (Common Gateway Interface) app

	Common Gateway Interface (CGI) is among the oldest methods to serve dynamic content. When a CGI resource is accessed, the Apache server executes that resource as a program and uses the output of that process. The advantage of using CGI is that it is very flexible; it does not define which scripting language is needed to generate the dynamic content. 

	To serve CGI contents, a few requirements exist:
		- The ScriptAlias ScriptAlias /cgi-bin/ “/var/www/cgi-bin/” must exist. (Of course, it can be changed to refer to any other directory on the file system.)
		- The ScriptAlias directory (that is, the directory where the scripts are stored) must be provided with the httpd_sys_script_exec_t SELinux context type


### Deploy php app

	PHP scripts can be included using CGI, but a much better way is to install the mod_php Apache module which 
	enables an internal PHP interpreter, which is much more efficient. Installing mod_php adds the configuration file /etc/httpd/conf.d/php.conf


### Deploy python app

	As is the case for PHP script, Python scripts can also be executed in two ways. They can be included as a CGI script, or the Web Server Gateway Interface (WSGI) can be used. This interface provides a new directive in the Apache configuration files to refer to the names of specific scripts. To deploy WSGI scripts, use the following
	approach:

		1. Install the mod_wsgi package.
	
		2. Add a WSGIScriptAlias line to a virtual host definition. This directive takes two arguments, the first of which refers to the alias on the Apache server, and the second of which refers directly to the Python script. So, the line could look like the following: WSGIScriptAlias /webapp/ /opt/webapp/app.py
	
		3. Ensure that the WSGI application is executable by the Apache user and group
		and that the SELinux context is set to httpd_sys_content_t.


### TLS security stuff

	- The TLS connection is established as follows:

		1. The client initiates a connection, using a ClientHello message. This message contains a list of the encryption protocols and ciphers that the client supports.

		2. The server responds with a ServerHello message, indicating the encryption ciphers it supports. The server also sends the server certificate, containing the public key, general server information like the fully qualified domain name (FQDN), and a signature from a CA.
		
		3. The client verifies the server certificate by checking whether the supplied information matches the request, and also by verifying all signatures.
		
		4. If the certificate is verified, the client creates a session key. This session key is encrypted with the public key of the server and sent back to the server.
		
		5. The server decrypts the session key, after which it can be used to encrypt and decrypt all data that is sent between client and server.


	### High level configuration
	
		- A certificate must be obtained
		- The required TLS modules must be installed
		- The Apache (virtual) host must be configured to use the certificates


	### Configuration in detail
	
		# yum install crypto-utils mod_ssl

	    - Generate self-signed certs
		# genkey --days 365 app1.nixation.com
			- Keys are placed into /etc/pki/tls/certs and /etc/pki/tls/private
		# chmod 400 app2.*
			# rngd -r /dev/urandom 	- Run to speed up key generation or do some random stuff like running "top" command
	
		- Add the following to VirtualHost configuration. ssl.conf can be used as example to gather this

	        SSLEngine On
	        SSLCertificateFile /etc/httpd/certs/app1.crt
	        SSLCertificateKeyFile /etc/httpd/certs/app1.key
