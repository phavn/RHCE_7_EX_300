##### NFS - Network File System #####

	- Client

		- Install packages
			# yum install nfs-utils rpcbind
		- List mounts on available on server:
			# showmount -e <ip address>
		- List ports used by rpc
			# rpcinfo -p <ip address>
		- Mount nfs mount
			# mount -t nfs <ip address>:/nfsmnt /mnt/nfsmnt
		- /etc/fstab
			- When adding nfs mount to /etc/fstab file, make sure to add _netdev option. It makes sure nfs mount is mounted only after network services start


	- server- https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/nfs-serverconfig
		- Install packages:
			# yum install nfs-utils
		- enable and start NFS service
			# systemctl enable nfs-server
			# systemctl enable nfs-config
			# systemctl start nfs-config
			# systemctl start nfs-server

		- Add nfs and rpc to firewalld
			# firewall-cmd --permanent --add-service=nfs
		- Get port rpc.mountd is listening on
			# netstat -ntap | grep rpc
			# firewall-cmd --permanent --add-service=nfs
			# firewall-cmd --permanent --add-service=rpc-bind
			# firewall-cmd --permanent --add-service=mountd
			# firewall-cmd --reload
		- rpcinfo -p <nfs server> command and showmount -e <nfs server> should now work on client

			- Note: rpcbind service has to get started for NFSv3 compatibility or for showmount command - https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/s2-nfs-methodology-portmap
			- Also nfslock and nfs-idmapd services can be usefull. nfslock provides file access locking. nfs-idmapd provides id mapping service

		- Export mount
			# vi /etc/exports
		- Load config and Build export table
			# exportfs -r -v

		- /etc/fstab
			nfsserver:/share/path 	/mountpoint 	nfs 	_netdev	0 0

		- Make sure remote-fs.target target is enabled on the client. This mounts remote shares on boot
			# systemctl status remote-fs.target


	- NFS security
		no_root_squash 	- Allows for root access to the mount. Very unsecure, do not use.

	- SELinux context list. If you forget this, use "seinfo -t | grep nfs" command to look it up
		nfs_t 						- Allows NFS server to access the share
		public_content_t 			- Generic context type thgat allows NFS server to read the contents of the dir. Other services like samba and ftp can use it as well
		public_content_rw_t			- This context allows NFS server rw access to dir

	- SELinux booleans - both are enabled by default
		nfs_export_all_ro
		nfs_export_all_rw


### NFSv4 SELinux Transparancy

	- By default, linux mount uses nfs_t fcontext type when mounting NFS shares no matter what fcontext is set on the server. This can be changed by using conext="context" mount option
		# mount -o context="system_u,object_r:public_content_rw_t:s0" server1:/srv/nfsexport /mnt/nfs


### NFS Kerberos Authentication ###

	To add security to an NFS share, you need to add the sec= method option while defining the share in /etc/exports. The following security methods are
	available:

		- none Anonymous access to files is allowed. All access is based on the per-missions of the user nfsnobody on the NFS server. So, you must make sure 
		that this user has the appropriate permissions to files and directories. If the user nobody needs write access as well, you need to make sure that the nfsd_anon_write SELinux Boolean is active also. Notice that you should never do this, because you’ll be granting any user access to the share with full write permissions.

		- sys This is the default security option, where user access to files is based on UID and GID values. A UID coming from the NFS client will be mapped to the same UID on the NFS server (even if the user names associated to that UID do not match).

		- krb5 NFS clients (that means machines, not users) prove their identity using a Kerberos keytab file. To access files in the NFS share, the user needs to initialize a Kerberos setting as well; otherwise, no access is allowed to files. That means that the authentication session of a user needs to be Kerberized, and if this is not the case, the user must initiate a session using kinit username

		- krb5i Same as krb5 with the addition that a cryptographic guarantee is added to make sure that data in the request has not been tampered with.

		- krb5p Same as krb5i but also adds encryption to all requests between server and client. This does have a performance impact, but it offers the best possible protection.




	To establish a Kerberized session between NFS client and host, a few items are required:

		- /etc/krb5.keytab: This file contains the security principals for both the NFS server as the NFS client, and it is required to join the Kerberos realm. In the /etc/krb5.keytab file, the host principal, the NFS principal, or both principals are contained. To verify the contents of the keytab file, use the klist -k command.

		- A Kerberized user session: After configuring remote authentication against a Kerberos server, as described in Chapter 25 , “Configuring External Authentication and Authorization,” the login procedure is already Kerberized, and no additional action is required. You can use the klist command to verify that this is the case; this command shows all current Kerberos credentials on your machine. If klist does not show any Kerberos credentials, a Kerberized session can be established manually.

		- The sec= method option, both in the share definition and in the mount options. This enables the desired Kerberos method.

		- The nfs-server as well as the nfs-secure-server services must be active on the NFS server. On RHEL 7.0 you had to manually load this service and enable them, since RHEL 7.1 they are automatically loaded if shares with any of the Kerberos options are offered.

		- The nfs-secure service must be loaded on the client. On RHEL 7.0 you had to manually load and enable this service. Since RHEL 7.1, it is loaded automatically if a Kerberized share is accessed.




	- Instructions - https://www.certdepot.net/rhel7-use-kerberos-control-access-nfs-network-shares/

		- Kerberized NFS server instructions using 3 servers - krbserver, nfsserver, nfsclient

			1. Set up kerberos server on krbserver
			2. Set up kerberos client on nfsclient
			3. Set up NFS server on nfsserver
			4. kadmin on nfsserver
				# addprinc -randkey nfs/nfsserver.nixation.com
				# ktadd nfs/nfsserver.nixation.com
			5. kadmin on nfsclient
				# addprinc -randkey nfs/nfsclient.nixation.com
				# ktadd nfs/nfsclient.nixation.com

			6. Add krb5p options to /etc/exports NFS share on nfsserver
				/etc/expors example: "/nfsshare	192.168.100.0/24(rw,sec=krb5p)
				# exports -rv
			7. Mount share on nfsclient using krb5p option
				# mount -t nfs -o sec=krb5p nfsserver:/nfsshare /mnt/nfsshare/

			   At this point, only authorized kerberos users with valid TGT would be able to see and access the mount on nfsclient
			   	# su - joe
			   	# kinit
			   	- Mount should appear now

